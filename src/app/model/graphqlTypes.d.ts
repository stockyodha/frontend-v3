/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */
 

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface GQLQuery {
  
  /**
   * Checks if username is valid
   */
  checkUsername: boolean;
  getMyWallet: GQLWallet;
  getProfitLoss: number;
  getWatchlist: Array<GQLStockWatchlist>;
  health: string;
  isWatchlisted: boolean;
  
  /**
   * Login User
   */
  login: GQLJSON;
  
  /**
   * Get current logged in user
   */
  me: GQLUser;
  mySettings: GQLJSON;
  paginatedNews: GQLPaginatedNewsResponse;
  
  /**
   * Refreshes a token
   */
  refreshToken: GQLJSON;
  search: GQLSearchResult;
  stockNews: GQLJSON;
}

export interface GQLWallet {
  balance: number;
  balanceAdded: number;
  createdAt: GQLDateTime;
  deletedAt: GQLDateTime;
  id: string;
  updatedAt: GQLDateTime;
  user: GQLUser;
}

/**
 * The javascript `Date` as string. Type represents date and time as the ISO Date string.
 */
export type GQLDateTime = any;

export interface GQLUser {
  createdAt: GQLDateTime;
  deletedAt?: GQLDateTime;
  email?: string;
  id: string;
  isAdmin: boolean;
  updatedAt: GQLDateTime;
  username: string;
}

export interface GQLStockWatchlist {
  id: string;
  stock: GQLStock;
  user: GQLUser;
}

export interface GQLStock {
  description: string;
  id: string;
  industry: string;
  moneyControlId: string;
  name: string;
  sentiment: number;
  symbol: string;
  ttid: string;
  updatedAt: GQLDateTime;
}

/**
 * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
 */
export type GQLJSON = any;

export interface GQLPaginatedNewsResponse {
  data: Array<GQLNews>;
  items: number;
  pages: number;
  status: string;
  total: number;
}

export interface GQLNews {
  ago: string;
  analysed: boolean;
  content: string;
  date: GQLDateTime;
  description: string;
  id: string;
  imgUrl: string;
  source: GQLNewsSource;
  stocks: string;
  title: string;
  url: string;
}

/**
 * News source
 */
export const enum GQLNewsSource {
  CNBCTV18 = 'CNBCTV18',
  MONEYCONTROL = 'MONEYCONTROL',
  TICKER_TAPE = 'TICKER_TAPE'
}

export interface GQLSearchResult {
  news: Array<GQLNews>;
  stocks: Array<GQLStock>;
  users: Array<GQLUser>;
}

export interface GQLMutation {
  addMoneyToWallet: GQLWallet;
  buyStock: boolean;
  
  /**
   * Logout User
   */
  logout: string;
  
  /**
   * Creates a new user
   */
  register: GQLJSON;
  sellStock: boolean;
  shortSellStock: boolean;
  toggleStockWatchlist: boolean;
  
  /**
   * Updates user password
   */
  updatePassword: boolean;
}

export interface GQLBoardMeeting {
  annoucementDate: GQLDateTime;
  attachment: string;
  description: string;
  meetingDate: GQLDateTime;
  purpose: string;
  stock: GQLStock;
  stockId: string;
}

export interface GQLFunFact {
  fact: string;
  id: string;
}

/**
 * type of the instruction
 */
export const enum GQLInstructionType {
  BUY = 'BUY',
  SELL = 'SELL'
}

export interface GQLInstructions {
  createdAt: GQLDateTime;
  isBse: boolean;
  message: string;
  quantity: number;
  stock: GQLStock;
  stockId: string;
  type: GQLInstructionType;
  updatedAt: GQLDateTime;
  user: GQLUser;
  userId: string;
}

export interface GQLNewsPublisher {
  id: string;
  logo: string;
  name: string;
}

export interface GQLNotification {
  createdAt: GQLDateTime;
  deleted: boolean;
  description: string;
  id: string;
  read: boolean;
  title: string;
  user: GQLUser;
}

export interface GQLPeers {
  peer: GQLStock;
  peerId: string;
  stock: GQLStock;
  stockId: string;
  updatedAt: GQLDateTime;
}

export interface GQLPortfolio {
  createdAt: GQLDateTime;
  deletedAt: GQLDateTime;
  quantity: number;
  stock: GQLStock;
  stockId: string;
  type: GQLPortfolioType;
  updatedAt: GQLDateTime;
  user: GQLUser;
  userId: string;
}

/**
 * type of the portfolio
 */
export const enum GQLPortfolioType {
  DELIVERY = 'DELIVERY',
  FUTURE = 'FUTURE',
  INTRADAY = 'INTRADAY',
  OPTION = 'OPTION'
}

export interface GQLRefreshToken {
  createdAt: GQLDateTime;
  expiresAt: GQLDateTime;
  id: string;
  token: string;
  updatedAt: GQLDateTime;
  user: GQLUser;
}

export interface GQLSearchHistory {
  createdAt: GQLDateTime;
  entityId: string;
  query: string;
  type: GQLSearchType;
  user: GQLUser;
  userId: string;
}

/**
 * The type of search
 */
export const enum GQLSearchType {
  STOCK = 'STOCK',
  USER = 'USER'
}

export interface GQLSentimentHistory {
  createdAt: GQLDateTime;
  sentiment: number;
  symbol: string;
}

export interface GQLStockInfo {
  apef?: number;
  avgVol3m?: number;
  beta?: number;
  bps?: number;
  createdAt: GQLDateTime;
  divYield?: number;
  eps?: number;
  etfLiq?: number;
  etfLiqLabel?: string;
  high52w?: number;
  id: string;
  inddy?: number;
  indpb?: number;
  indpe?: number;
  lastPrice?: number;
  low52w?: number;
  marketCap?: number;
  marketCapLabel?: string;
  mrktCapRank?: number;
  mrktCapf?: number;
  nShareholders?: number;
  pb?: number;
  pbr?: number;
  pct4w?: number;
  pct52w?: number;
  pe?: number;
  risk?: number;
  roe?: number;
  stock: GQLStock;
  vol12m?: number;
}

export interface GQLStockInfoHistory {
  apef?: number;
  avgVol3m?: number;
  beta?: number;
  bps?: number;
  createdAt: GQLDateTime;
  divYield?: number;
  eps?: number;
  etfLiq?: number;
  etfLiqLabel?: string;
  high52w?: number;
  id: string;
  inddy?: number;
  indpb?: number;
  indpe?: number;
  lastPrice?: number;
  low52w?: number;
  marketCap?: number;
  marketCapLabel?: string;
  mrktCapRank?: number;
  mrktCapf?: number;
  nShareholders?: number;
  pb?: number;
  pbr?: number;
  pct4w?: number;
  pct52w?: number;
  pe?: number;
  risk?: number;
  roe?: number;
  stock: GQLStock;
  vol12m?: number;
}

export interface GQLStockTechnical {
  closePrice: number;
  date: GQLDateTime;
  sma5: number;
  sma10: number;
  sma20: number;
  sma50: number;
  sma100: number;
  sma200: number;
  stock: GQLStock;
}

export interface GQLTransaction {
  amount: number;
  createdAt: GQLDateTime;
  deletedAt: GQLDateTime;
  id: string;
  message: string;
  stockId: string;
  type: GQLTransactionType;
  updatedAt: GQLDateTime;
  wallet: GQLWallet;
}

/**
 * Transaction type of the wallet
 */
export const enum GQLTransactionType {
  CREDIT = 'CREDIT',
  DEBIT = 'DEBIT'
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface GQLResolver {
  Query?: GQLQueryTypeResolver;
  Wallet?: GQLWalletTypeResolver;
  DateTime?: GraphQLScalarType;
  User?: GQLUserTypeResolver;
  StockWatchlist?: GQLStockWatchlistTypeResolver;
  Stock?: GQLStockTypeResolver;
  JSON?: GraphQLScalarType;
  PaginatedNewsResponse?: GQLPaginatedNewsResponseTypeResolver;
  News?: GQLNewsTypeResolver;
  SearchResult?: GQLSearchResultTypeResolver;
  Mutation?: GQLMutationTypeResolver;
  BoardMeeting?: GQLBoardMeetingTypeResolver;
  FunFact?: GQLFunFactTypeResolver;
  Instructions?: GQLInstructionsTypeResolver;
  NewsPublisher?: GQLNewsPublisherTypeResolver;
  Notification?: GQLNotificationTypeResolver;
  Peers?: GQLPeersTypeResolver;
  Portfolio?: GQLPortfolioTypeResolver;
  RefreshToken?: GQLRefreshTokenTypeResolver;
  SearchHistory?: GQLSearchHistoryTypeResolver;
  SentimentHistory?: GQLSentimentHistoryTypeResolver;
  StockInfo?: GQLStockInfoTypeResolver;
  StockInfoHistory?: GQLStockInfoHistoryTypeResolver;
  StockTechnical?: GQLStockTechnicalTypeResolver;
  Transaction?: GQLTransactionTypeResolver;
}
export interface GQLQueryTypeResolver<TParent = any> {
  checkUsername?: QueryToCheckUsernameResolver<TParent>;
  getMyWallet?: QueryToGetMyWalletResolver<TParent>;
  getProfitLoss?: QueryToGetProfitLossResolver<TParent>;
  getWatchlist?: QueryToGetWatchlistResolver<TParent>;
  health?: QueryToHealthResolver<TParent>;
  isWatchlisted?: QueryToIsWatchlistedResolver<TParent>;
  login?: QueryToLoginResolver<TParent>;
  me?: QueryToMeResolver<TParent>;
  mySettings?: QueryToMySettingsResolver<TParent>;
  paginatedNews?: QueryToPaginatedNewsResolver<TParent>;
  refreshToken?: QueryToRefreshTokenResolver<TParent>;
  search?: QueryToSearchResolver<TParent>;
  stockNews?: QueryToStockNewsResolver<TParent>;
}

export interface QueryToCheckUsernameArgs {
  username: string;
}
export interface QueryToCheckUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToCheckUsernameArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetMyWalletResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetProfitLossArgs {
  endDate: GQLDateTime;
  startDate: GQLDateTime;
}
export interface QueryToGetProfitLossResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToGetProfitLossArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToGetWatchlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToHealthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToIsWatchlistedArgs {
  stockId: string;
}
export interface QueryToIsWatchlistedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToIsWatchlistedArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToLoginArgs {
  password: string;
  username: string;
}
export interface QueryToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToLoginArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToMySettingsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToPaginatedNewsArgs {
  limit: number;
  page: number;
}
export interface QueryToPaginatedNewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPaginatedNewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToRefreshTokenArgs {
  refreshToken: string;
}
export interface QueryToRefreshTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToRefreshTokenArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToSearchArgs {
  query: string;
}
export interface QueryToSearchResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToSearchArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToStockNewsArgs {
  stock: string;
}
export interface QueryToStockNewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToStockNewsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLWalletTypeResolver<TParent = any> {
  balance?: WalletToBalanceResolver<TParent>;
  balanceAdded?: WalletToBalanceAddedResolver<TParent>;
  createdAt?: WalletToCreatedAtResolver<TParent>;
  deletedAt?: WalletToDeletedAtResolver<TParent>;
  id?: WalletToIdResolver<TParent>;
  updatedAt?: WalletToUpdatedAtResolver<TParent>;
  user?: WalletToUserResolver<TParent>;
}

export interface WalletToBalanceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WalletToBalanceAddedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WalletToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WalletToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WalletToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WalletToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface WalletToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLUserTypeResolver<TParent = any> {
  createdAt?: UserToCreatedAtResolver<TParent>;
  deletedAt?: UserToDeletedAtResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  id?: UserToIdResolver<TParent>;
  isAdmin?: UserToIsAdminResolver<TParent>;
  updatedAt?: UserToUpdatedAtResolver<TParent>;
  username?: UserToUsernameResolver<TParent>;
}

export interface UserToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIsAdminResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUsernameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStockWatchlistTypeResolver<TParent = any> {
  id?: StockWatchlistToIdResolver<TParent>;
  stock?: StockWatchlistToStockResolver<TParent>;
  user?: StockWatchlistToUserResolver<TParent>;
}

export interface StockWatchlistToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockWatchlistToStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockWatchlistToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStockTypeResolver<TParent = any> {
  description?: StockToDescriptionResolver<TParent>;
  id?: StockToIdResolver<TParent>;
  industry?: StockToIndustryResolver<TParent>;
  moneyControlId?: StockToMoneyControlIdResolver<TParent>;
  name?: StockToNameResolver<TParent>;
  sentiment?: StockToSentimentResolver<TParent>;
  symbol?: StockToSymbolResolver<TParent>;
  ttid?: StockToTtidResolver<TParent>;
  updatedAt?: StockToUpdatedAtResolver<TParent>;
}

export interface StockToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockToIndustryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockToMoneyControlIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockToSentimentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockToSymbolResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockToTtidResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPaginatedNewsResponseTypeResolver<TParent = any> {
  data?: PaginatedNewsResponseToDataResolver<TParent>;
  items?: PaginatedNewsResponseToItemsResolver<TParent>;
  pages?: PaginatedNewsResponseToPagesResolver<TParent>;
  status?: PaginatedNewsResponseToStatusResolver<TParent>;
  total?: PaginatedNewsResponseToTotalResolver<TParent>;
}

export interface PaginatedNewsResponseToDataResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginatedNewsResponseToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginatedNewsResponseToPagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginatedNewsResponseToStatusResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PaginatedNewsResponseToTotalResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNewsTypeResolver<TParent = any> {
  ago?: NewsToAgoResolver<TParent>;
  analysed?: NewsToAnalysedResolver<TParent>;
  content?: NewsToContentResolver<TParent>;
  date?: NewsToDateResolver<TParent>;
  description?: NewsToDescriptionResolver<TParent>;
  id?: NewsToIdResolver<TParent>;
  imgUrl?: NewsToImgUrlResolver<TParent>;
  source?: NewsToSourceResolver<TParent>;
  stocks?: NewsToStocksResolver<TParent>;
  title?: NewsToTitleResolver<TParent>;
  url?: NewsToUrlResolver<TParent>;
}

export interface NewsToAgoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NewsToAnalysedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NewsToContentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NewsToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NewsToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NewsToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NewsToImgUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NewsToSourceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NewsToStocksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NewsToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NewsToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSearchResultTypeResolver<TParent = any> {
  news?: SearchResultToNewsResolver<TParent>;
  stocks?: SearchResultToStocksResolver<TParent>;
  users?: SearchResultToUsersResolver<TParent>;
}

export interface SearchResultToNewsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultToStocksResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchResultToUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLMutationTypeResolver<TParent = any> {
  addMoneyToWallet?: MutationToAddMoneyToWalletResolver<TParent>;
  buyStock?: MutationToBuyStockResolver<TParent>;
  logout?: MutationToLogoutResolver<TParent>;
  register?: MutationToRegisterResolver<TParent>;
  sellStock?: MutationToSellStockResolver<TParent>;
  shortSellStock?: MutationToShortSellStockResolver<TParent>;
  toggleStockWatchlist?: MutationToToggleStockWatchlistResolver<TParent>;
  updatePassword?: MutationToUpdatePasswordResolver<TParent>;
}

export interface MutationToAddMoneyToWalletArgs {
  amount: number;
  message?: string;
}
export interface MutationToAddMoneyToWalletResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToAddMoneyToWalletArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToBuyStockArgs {
  isBse: boolean;
  isNse: boolean;
  quantity: number;
  symbol: string;
}
export interface MutationToBuyStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToBuyStockArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToLogoutArgs {
  refreshToken: string;
}
export interface MutationToLogoutResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToLogoutArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToRegisterArgs {
  username: string;
}
export interface MutationToRegisterResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToRegisterArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToSellStockArgs {
  isBse: boolean;
  isNse: boolean;
  quantity: number;
  symbol: string;
}
export interface MutationToSellStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToSellStockArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToShortSellStockArgs {
  isBse: boolean;
  isNse: boolean;
  quantity: number;
  symbol: string;
}
export interface MutationToShortSellStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToShortSellStockArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToToggleStockWatchlistArgs {
  stockId: string;
}
export interface MutationToToggleStockWatchlistResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToToggleStockWatchlistArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdatePasswordArgs {
  password: string;
}
export interface MutationToUpdatePasswordResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdatePasswordArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLBoardMeetingTypeResolver<TParent = any> {
  annoucementDate?: BoardMeetingToAnnoucementDateResolver<TParent>;
  attachment?: BoardMeetingToAttachmentResolver<TParent>;
  description?: BoardMeetingToDescriptionResolver<TParent>;
  meetingDate?: BoardMeetingToMeetingDateResolver<TParent>;
  purpose?: BoardMeetingToPurposeResolver<TParent>;
  stock?: BoardMeetingToStockResolver<TParent>;
  stockId?: BoardMeetingToStockIdResolver<TParent>;
}

export interface BoardMeetingToAnnoucementDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BoardMeetingToAttachmentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BoardMeetingToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BoardMeetingToMeetingDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BoardMeetingToPurposeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BoardMeetingToStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface BoardMeetingToStockIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLFunFactTypeResolver<TParent = any> {
  fact?: FunFactToFactResolver<TParent>;
  id?: FunFactToIdResolver<TParent>;
}

export interface FunFactToFactResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface FunFactToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLInstructionsTypeResolver<TParent = any> {
  createdAt?: InstructionsToCreatedAtResolver<TParent>;
  isBse?: InstructionsToIsBseResolver<TParent>;
  message?: InstructionsToMessageResolver<TParent>;
  quantity?: InstructionsToQuantityResolver<TParent>;
  stock?: InstructionsToStockResolver<TParent>;
  stockId?: InstructionsToStockIdResolver<TParent>;
  type?: InstructionsToTypeResolver<TParent>;
  updatedAt?: InstructionsToUpdatedAtResolver<TParent>;
  user?: InstructionsToUserResolver<TParent>;
  userId?: InstructionsToUserIdResolver<TParent>;
}

export interface InstructionsToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InstructionsToIsBseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InstructionsToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InstructionsToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InstructionsToStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InstructionsToStockIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InstructionsToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InstructionsToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InstructionsToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface InstructionsToUserIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNewsPublisherTypeResolver<TParent = any> {
  id?: NewsPublisherToIdResolver<TParent>;
  logo?: NewsPublisherToLogoResolver<TParent>;
  name?: NewsPublisherToNameResolver<TParent>;
}

export interface NewsPublisherToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NewsPublisherToLogoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NewsPublisherToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLNotificationTypeResolver<TParent = any> {
  createdAt?: NotificationToCreatedAtResolver<TParent>;
  deleted?: NotificationToDeletedResolver<TParent>;
  description?: NotificationToDescriptionResolver<TParent>;
  id?: NotificationToIdResolver<TParent>;
  read?: NotificationToReadResolver<TParent>;
  title?: NotificationToTitleResolver<TParent>;
  user?: NotificationToUserResolver<TParent>;
}

export interface NotificationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationToDeletedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationToReadResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationToTitleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface NotificationToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPeersTypeResolver<TParent = any> {
  peer?: PeersToPeerResolver<TParent>;
  peerId?: PeersToPeerIdResolver<TParent>;
  stock?: PeersToStockResolver<TParent>;
  stockId?: PeersToStockIdResolver<TParent>;
  updatedAt?: PeersToUpdatedAtResolver<TParent>;
}

export interface PeersToPeerResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PeersToPeerIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PeersToStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PeersToStockIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PeersToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLPortfolioTypeResolver<TParent = any> {
  createdAt?: PortfolioToCreatedAtResolver<TParent>;
  deletedAt?: PortfolioToDeletedAtResolver<TParent>;
  quantity?: PortfolioToQuantityResolver<TParent>;
  stock?: PortfolioToStockResolver<TParent>;
  stockId?: PortfolioToStockIdResolver<TParent>;
  type?: PortfolioToTypeResolver<TParent>;
  updatedAt?: PortfolioToUpdatedAtResolver<TParent>;
  user?: PortfolioToUserResolver<TParent>;
  userId?: PortfolioToUserIdResolver<TParent>;
}

export interface PortfolioToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PortfolioToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PortfolioToQuantityResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PortfolioToStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PortfolioToStockIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PortfolioToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PortfolioToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PortfolioToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PortfolioToUserIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLRefreshTokenTypeResolver<TParent = any> {
  createdAt?: RefreshTokenToCreatedAtResolver<TParent>;
  expiresAt?: RefreshTokenToExpiresAtResolver<TParent>;
  id?: RefreshTokenToIdResolver<TParent>;
  token?: RefreshTokenToTokenResolver<TParent>;
  updatedAt?: RefreshTokenToUpdatedAtResolver<TParent>;
  user?: RefreshTokenToUserResolver<TParent>;
}

export interface RefreshTokenToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefreshTokenToExpiresAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefreshTokenToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefreshTokenToTokenResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefreshTokenToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface RefreshTokenToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSearchHistoryTypeResolver<TParent = any> {
  createdAt?: SearchHistoryToCreatedAtResolver<TParent>;
  entityId?: SearchHistoryToEntityIdResolver<TParent>;
  query?: SearchHistoryToQueryResolver<TParent>;
  type?: SearchHistoryToTypeResolver<TParent>;
  user?: SearchHistoryToUserResolver<TParent>;
  userId?: SearchHistoryToUserIdResolver<TParent>;
}

export interface SearchHistoryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchHistoryToEntityIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchHistoryToQueryResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchHistoryToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchHistoryToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SearchHistoryToUserIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLSentimentHistoryTypeResolver<TParent = any> {
  createdAt?: SentimentHistoryToCreatedAtResolver<TParent>;
  sentiment?: SentimentHistoryToSentimentResolver<TParent>;
  symbol?: SentimentHistoryToSymbolResolver<TParent>;
}

export interface SentimentHistoryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SentimentHistoryToSentimentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface SentimentHistoryToSymbolResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStockInfoTypeResolver<TParent = any> {
  apef?: StockInfoToApefResolver<TParent>;
  avgVol3m?: StockInfoToAvgVol3mResolver<TParent>;
  beta?: StockInfoToBetaResolver<TParent>;
  bps?: StockInfoToBpsResolver<TParent>;
  createdAt?: StockInfoToCreatedAtResolver<TParent>;
  divYield?: StockInfoToDivYieldResolver<TParent>;
  eps?: StockInfoToEpsResolver<TParent>;
  etfLiq?: StockInfoToEtfLiqResolver<TParent>;
  etfLiqLabel?: StockInfoToEtfLiqLabelResolver<TParent>;
  high52w?: StockInfoToHigh52wResolver<TParent>;
  id?: StockInfoToIdResolver<TParent>;
  inddy?: StockInfoToInddyResolver<TParent>;
  indpb?: StockInfoToIndpbResolver<TParent>;
  indpe?: StockInfoToIndpeResolver<TParent>;
  lastPrice?: StockInfoToLastPriceResolver<TParent>;
  low52w?: StockInfoToLow52wResolver<TParent>;
  marketCap?: StockInfoToMarketCapResolver<TParent>;
  marketCapLabel?: StockInfoToMarketCapLabelResolver<TParent>;
  mrktCapRank?: StockInfoToMrktCapRankResolver<TParent>;
  mrktCapf?: StockInfoToMrktCapfResolver<TParent>;
  nShareholders?: StockInfoToNShareholdersResolver<TParent>;
  pb?: StockInfoToPbResolver<TParent>;
  pbr?: StockInfoToPbrResolver<TParent>;
  pct4w?: StockInfoToPct4wResolver<TParent>;
  pct52w?: StockInfoToPct52wResolver<TParent>;
  pe?: StockInfoToPeResolver<TParent>;
  risk?: StockInfoToRiskResolver<TParent>;
  roe?: StockInfoToRoeResolver<TParent>;
  stock?: StockInfoToStockResolver<TParent>;
  vol12m?: StockInfoToVol12mResolver<TParent>;
}

export interface StockInfoToApefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToAvgVol3mResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToBetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToBpsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToDivYieldResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToEpsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToEtfLiqResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToEtfLiqLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToHigh52wResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToInddyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToIndpbResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToIndpeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToLastPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToLow52wResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToMarketCapResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToMarketCapLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToMrktCapRankResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToMrktCapfResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToNShareholdersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToPbResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToPbrResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToPct4wResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToPct52wResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToPeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToRiskResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToRoeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoToVol12mResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStockInfoHistoryTypeResolver<TParent = any> {
  apef?: StockInfoHistoryToApefResolver<TParent>;
  avgVol3m?: StockInfoHistoryToAvgVol3mResolver<TParent>;
  beta?: StockInfoHistoryToBetaResolver<TParent>;
  bps?: StockInfoHistoryToBpsResolver<TParent>;
  createdAt?: StockInfoHistoryToCreatedAtResolver<TParent>;
  divYield?: StockInfoHistoryToDivYieldResolver<TParent>;
  eps?: StockInfoHistoryToEpsResolver<TParent>;
  etfLiq?: StockInfoHistoryToEtfLiqResolver<TParent>;
  etfLiqLabel?: StockInfoHistoryToEtfLiqLabelResolver<TParent>;
  high52w?: StockInfoHistoryToHigh52wResolver<TParent>;
  id?: StockInfoHistoryToIdResolver<TParent>;
  inddy?: StockInfoHistoryToInddyResolver<TParent>;
  indpb?: StockInfoHistoryToIndpbResolver<TParent>;
  indpe?: StockInfoHistoryToIndpeResolver<TParent>;
  lastPrice?: StockInfoHistoryToLastPriceResolver<TParent>;
  low52w?: StockInfoHistoryToLow52wResolver<TParent>;
  marketCap?: StockInfoHistoryToMarketCapResolver<TParent>;
  marketCapLabel?: StockInfoHistoryToMarketCapLabelResolver<TParent>;
  mrktCapRank?: StockInfoHistoryToMrktCapRankResolver<TParent>;
  mrktCapf?: StockInfoHistoryToMrktCapfResolver<TParent>;
  nShareholders?: StockInfoHistoryToNShareholdersResolver<TParent>;
  pb?: StockInfoHistoryToPbResolver<TParent>;
  pbr?: StockInfoHistoryToPbrResolver<TParent>;
  pct4w?: StockInfoHistoryToPct4wResolver<TParent>;
  pct52w?: StockInfoHistoryToPct52wResolver<TParent>;
  pe?: StockInfoHistoryToPeResolver<TParent>;
  risk?: StockInfoHistoryToRiskResolver<TParent>;
  roe?: StockInfoHistoryToRoeResolver<TParent>;
  stock?: StockInfoHistoryToStockResolver<TParent>;
  vol12m?: StockInfoHistoryToVol12mResolver<TParent>;
}

export interface StockInfoHistoryToApefResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToAvgVol3mResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToBetaResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToBpsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToDivYieldResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToEpsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToEtfLiqResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToEtfLiqLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToHigh52wResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToInddyResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToIndpbResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToIndpeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToLastPriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToLow52wResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToMarketCapResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToMarketCapLabelResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToMrktCapRankResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToMrktCapfResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToNShareholdersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToPbResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToPbrResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToPct4wResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToPct52wResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToPeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToRiskResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToRoeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockInfoHistoryToVol12mResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLStockTechnicalTypeResolver<TParent = any> {
  closePrice?: StockTechnicalToClosePriceResolver<TParent>;
  date?: StockTechnicalToDateResolver<TParent>;
  sma5?: StockTechnicalToSma5Resolver<TParent>;
  sma10?: StockTechnicalToSma10Resolver<TParent>;
  sma20?: StockTechnicalToSma20Resolver<TParent>;
  sma50?: StockTechnicalToSma50Resolver<TParent>;
  sma100?: StockTechnicalToSma100Resolver<TParent>;
  sma200?: StockTechnicalToSma200Resolver<TParent>;
  stock?: StockTechnicalToStockResolver<TParent>;
}

export interface StockTechnicalToClosePriceResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockTechnicalToDateResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockTechnicalToSma5Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockTechnicalToSma10Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockTechnicalToSma20Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockTechnicalToSma50Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockTechnicalToSma100Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockTechnicalToSma200Resolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface StockTechnicalToStockResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface GQLTransactionTypeResolver<TParent = any> {
  amount?: TransactionToAmountResolver<TParent>;
  createdAt?: TransactionToCreatedAtResolver<TParent>;
  deletedAt?: TransactionToDeletedAtResolver<TParent>;
  id?: TransactionToIdResolver<TParent>;
  message?: TransactionToMessageResolver<TParent>;
  stockId?: TransactionToStockIdResolver<TParent>;
  type?: TransactionToTypeResolver<TParent>;
  updatedAt?: TransactionToUpdatedAtResolver<TParent>;
  wallet?: TransactionToWalletResolver<TParent>;
}

export interface TransactionToAmountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToDeletedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToMessageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToStockIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface TransactionToWalletResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
